from aiogram.types import (
	Message, CallbackQuery,
	InlineKeyboardMarkup, InlineKeyboardButton
)

from main import bot
import random as rd
from copy import deepcopy as copy


team_next_round, move, choosed_pawn = None, None, None

red_c, blue_c = 0, 0
red_alive, blue_alive = True, True

win = ''

may_moves = []

teams = {
	'red': ["", 0],
	'blue': ["", 0] # 1004461367
}

game_field = [
	['üî∫', '.', '.', '.', '.', '.', '.', 'üîπ'],
	['üî∫', '.', '.', '.', '.', '.', '.', 'üîπ'],
	['üî∫', '.', '.', '.', '.', '.', '.', 'üîπ'],
	['üî∫', '.', '.', '.', '.', '.', '.', 'üîπ'],
	['üè∞', '.', '.', '.', '.', '.', '.', 'üèØ'],
	['üî∫', '.', '.', '.', '.', '.', '.', 'üîπ'],
	['üî∫', '.', '.', '.', '.', '.', '.', 'üîπ'],
	['üî∫', '.', '.', '.', '.', '.', '.', 'üîπ'],
	['üî∫', '.', '.', '.', '.', '.', '.', 'üîπ'],
]


# —Ñ—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª—è—é—â–∞—è –ø–µ—à–∫—É –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–∞–ª—å—à–µ –≤—Å–µ–≥–æ –∫ —Å–≤–æ–µ–º—É –∑–∞–º–∫—É
def calc_distance(team):
	sym = 'üî∫' if team == 'red' else 'üîπ'
	distances = []

	if team == 'red':
		for y in range(9):
			for x in range(8):
				if game_field[y][x] == sym:
					distances.append(x)
	else:
		for y in range(9):
			for x in range(7, -1, -1):
				if game_field[y][x] == sym:
					distances.append(7-x)

	return distances

# —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –∫–æ–ª–≤-–æ –ø–µ—à–µ–∫ –æ—Ç –∫—Ä–∞—è –Ω–∞ 3 –ø–æ–∑–∏—Ü–∏–∏ >= 3
def can_move_back(team):
	d = calc_distance(team)
	
	for i in range(len(d)):
		if d[i] < 4: d[i] = 0 

	return d.count(4) >= 1

# —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª-–≤–æ –ø–µ—à–µ–∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
def count_pawns(team):
	sym = 'üî∫' if team == 'red' else 'üîπ'
	count = 0

	for pawns in game_field:
		for pawn in pawns:
			if pawn == sym:
				count += 1

	return count

# —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≤–∏—Ç –≤–æ–∑–º–æ–∂–Ω—É—é –æ—à–∏–±–∫—É, —Å–ª—É–∂–∏—Ç –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∫–æ–¥–∞	
def catch(x, y):
	try:
		return game_field[y][x]
	except IndexError:
		return None

# –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
def enemy(team):
	return 'blue' if team == 'red' else 'red'

# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Ä–∏–∞—Ü–∏—é —Å–ª–æ–≤–∞ "–ø–µ—à–∫–∞" –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —á–∏—Å–ª–∞
def string_num(num):
	if num == 1:
		return '–ø–µ—à–∫–∞'
	elif num in [2, 3, 4]:
		return '–ø–µ—à–∫–∏'
	else:
		return '–ø–µ—à–µ–∫'

# —É–ø—Ä–æ—â–∞–µ—Ç –∫–æ–¥ –≥–¥–µ –Ω—É–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å –∫–æ–ª-–≤–æ –ø–µ—à–µ–∫ –≤ –∑–∞–º–∫–µ
# –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "–∑–∞–º–æ–∫ —Ä–∞–∑—Ä—É—à–µ–Ω" –µ—Å–ª–∏ –æ–Ω —Ä–∞–∑—Ä—É—à–µ–Ω
def castle_pawns_count(team):
	if team == 'red' and red_alive:
		return f'{red_c} {string_num(red_c)}'
	elif team == 'blue' and blue_alive:
		return f'{blue_c} {string_num(blue_c)}'
	else:
		return '–∑–∞–º–æ–∫ —Ä–∞–∑—Ä—É—à–µ–Ω'


# –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –∏–≥—Ä—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é, —Ç–∞–∫ –∂–µ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
async def alert_win(query: CallbackQuery):
	text = f"""
***__The Castle Game__***

***–ò–≥—Ä–æ–∫–∏:***
    üî¥ `{teams['red'][0]}`
    üîµ `{teams['blue'][0]}`

***–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:*** {'üî¥' if win == 'red' else 'üîµ'} `{teams[win][0]}`		   
	"""
	
	keyboard = [[InlineKeyboardButton("–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='play_again')]]
	
	markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
	
	await bot.edit_message_text(text, inline_message_id=query.inline_message_id, reply_markup=markup)
	
# –∏–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –∏/–∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è
async def rewrite(query: CallbackQuery, team):
	text = f"""
***__The Castle Game__***

***–ò–≥—Ä–æ–∫–∏:***
    üî¥ `{teams['red'][0]}`
    üîµ `{teams['blue'][0]}`

***–ó–∞–º–∫–∏:***
    üè∞: `{castle_pawns_count('red')}`
    üèØ: `{castle_pawns_count('blue')}`

***–•–æ–¥–∏—Ç:*** `{teams[team][0]}`
***–ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å {move} {'—à–∞–≥' if move == 1 else '—à–∞–≥–∞'}***
	"""

	keyboard = copy(game_field)

	for y in range(9):
		for x in range(8):
			keyboard[y][x] = InlineKeyboardButton(f" {keyboard[y][x]} ", callback_data=f'{keyboard[y][x]}_{x}_{y}')

	markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

	await bot.edit_message_text(text, inline_message_id=query.inline_message_id, reply_markup=markup)

# –≤—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã: –∫—Ä–∞—Å–Ω–∞—è/—Å–∏–Ω—è—è
async def set_team(query: CallbackQuery, team):
	if team != 'again':
		if teams[team][1] != 0 and teams[team][1] != query.from_user.id:
			await query.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞.")
		elif teams[team][1] == query.from_user.id:
			teams[team] = ["", 0]
		else:
			if teams[enemy(team)][1] == query.from_user.id: teams[enemy(team)] = ["", 0]
			teams[team] = [query.from_user.first_name, query.from_user.id]

	text = f"""
***__The Castle Game__***

***–ò–≥—Ä–æ–∫–∏:***
    üî¥ `{teams['red'][0]}`
    üîµ `{teams['blue'][0]}`

***–í—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥:***
	"""

	keyboard = [
		[
			InlineKeyboardButton(" üî¥ ", callback_data='red_team'),
			InlineKeyboardButton(" üîµ ", callback_data='blue_team')
   		],
		[
			InlineKeyboardButton("–ò–≥—Ä–∞—Ç—å", callback_data='play')
		]
	]

	markup = InlineKeyboardMarkup(inline_keyboard=keyboard, row_width=2)

	await bot.edit_message_text(text, inline_message_id=query.inline_message_id, reply_markup=markup)

# –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—è)
async def start_play(query: CallbackQuery):
	global team_next_round, move

	if teams['blue'][1] == 0 or teams['red'][1] == 0:
		await query.answer("–ù–µ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.")
		return
	
	team = team_next_round = rd.choice(['red', 'blue'])
	move = rd.randint(1, 3)

	await rewrite(query, team)

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
async def check_win(query, team):
	global win
	
	if (not red_alive) or (not blue_alive):
		if team == 'red' and count_pawns('blue') == 0:
			win = 'red'
			await alert_win(query)
			return True
		elif team == 'blue' and count_pawns('red') == 0:
			win = 'blue'
			await alert_win(query)
			return True
	
	return False

# –µ—Å–ª–∏ –ø–µ—à–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞(choosed_pawn), —Ç–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–∞
# –Ω–æ –µ—Å–ª–∏ –ø–µ—à–∫–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –µ—é –ø–æ—Ö–æ–¥–∏—Ç—å
async def pawn_move(query: CallbackQuery):
	global team_next_round, move, choosed_pawn, may_moves
	global red_c, blue_c, castle_move
	global red_alive, blue_alive


	pawn_sym, x, y = query.data.split('_')
	x, y = int(x), int(y)
	team = 'red' if teams['red'][1] == query.from_user.id else 'blue'


	if win != '': return

	if team != team_next_round:
		await query.answer("–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫.")
		return

	# –≤—ã–±–æ—Ä –ø–µ—à–∫–∏
	if choosed_pawn is None:
		if pawn_sym in (['üèØ', 'üîπ'] if team == 'red' else ['üè∞', 'üî∫']):
			await query.answer("–≠—Ç–æ–π –ø–µ—à–∫–æ–π –Ω–µ–ª—å–∑—è —Ö–æ–¥–∏—Ç—å.")
			return
		elif pawn_sym == '.':
			await query.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—à–∫—É.")
			return

		choosed_pawn = query.data

		may_moves.append(f"{catch(x, y+move)}_{x}_{y+move}")
		may_moves.append(f"{catch(x+move, y+move)}_{x+move}_{y+move}")
		may_moves.append(f"{catch(x+move, y)}_{x+move}_{y}")
		may_moves.append(f"{catch(x+move, y-move)}_{x+move}_{y-move}")
		may_moves.append(f"{catch(x, y-move)}_{x}_{y-move}")
		may_moves.append(f"{catch(x-move, y-move)}_{x-move}_{y-move}")
		may_moves.append(f"{catch(x-move, y)}_{x-move}_{y}")
		may_moves.append(f"{catch(x-move, y+move)}_{x-move}_{y+move}")

		# await query.answer("–ü–µ—à–∫–∞ –≤—ã–±—Ä–∞–Ω–∞.")
		# print(may_moves)

	# —Ö–æ–¥
	else:
		if pawn_sym in (['üî∫', 'üè∞'] if team == 'red' else ['üîπ', 'üèØ']):
			choosed_pawn = None
			may_moves.clear()
			await pawn_move(query)
			return

		if query.data not in may_moves:
			await query.answer("–°—é–¥–∞ –Ω–µ–ª—å–∑—è —Ö–æ–¥–∏—Ç—å.")
			return

		c_sym, c_x, c_y = choosed_pawn.split('_')
		c_x, c_y = int(c_x), int(c_y)

		if c_sym == ('üè∞' if team == 'red' else 'üèØ'):
			if (red_c if team == 'red' else blue_c) == 0:
				await query.answer("–í –∑–∞–º–∫–µ –Ω–µ—Ç—É –ø–µ—à–µ–∫ –¥–ª—è —Ö–æ–¥–∞.")
				return


		if not (c_sym == ('üè∞' if team == 'red' else 'üèØ')):
			game_field[c_y][c_x] = '.'

		game_field[y][x] = c_sym.replace('üè∞', 'üî∫').replace('üèØ', 'üîπ')

		if c_sym == ('üè∞' if team == 'red' else 'üèØ'):
			if team == 'red': red_c -= 1
			else: blue_c -= 1
		
		if pawn_sym == ('üîπ' if team == 'red' else 'üî∫'):
			if team == 'red': blue_c += 1
			else: red_c += 1

		elif pawn_sym == ('üèØ' if team == 'red' else 'üè∞'):
			if team == 'red' and blue_c == 0:
				blue_alive = False
			elif team == 'blue' and red_c == 0:
				red_alive = False
			
			else:
				if team == 'red':
					red_c += 1
					blue_c -= 1
				else:
					blue_c += 1
					red_c -= 1
					
				game_field[y][x] = 'üèØ' if team == 'red' else 'üè∞'

			if await check_win(query, team): return

		if await check_win(query, team): return


		choosed_pawn = None
		may_moves.clear()

		team_next_round = 'red' if team == 'blue' else 'blue'
		move = rd.randint(1, 3)

		await rewrite(query, team_next_round)
